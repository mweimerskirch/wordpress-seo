name: Lint

on:
  # Run on pushes to select branches and on all pull requests.
  push:
#    branches:
#      - master
#      - trunk
#      - 'release/**'
#      - 'hotfix/[0-9]+.[0-9]+*'
#      - 'feature/**'
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # Lint against the highest/lowest supported versions of each PHP major.
        # And also do a run against "nightly" (the current dev version of PHP).
        php_version: ['5.6', '7.0', '7.4', '8.0', '8.1', '8.2']

    name: "Lint: PHP ${{ matrix.php_version }}"

    # Allow builds to fail on as-of-yet unreleased PHP versions.
    continue-on-error: ${{ matrix.php_version == '8.2' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # The prefix-dependencies task only works on PHP 7.1 and we need to prefix our dependencies to make sure there
      # are no parse errors in the adjusted code.
      # So we initially install PHP 7.1, do a full install and then remove the packages related to the prefixing.
      # After this, we switch to the PHP version in which we want to run the linting and delete the vendor directory.
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.2
          ini-values: zend.assertions=1, error_reporting=-1, display_errors=On
          coverage: none

      - name: Install Composer dependencies and generate vendor_prefixed directory
        uses: ramsey/composer-install@v2

      # Remove packages which are not PHP cross-version compatible.
      # - humbug/php-scoper is only needed to actually do the prefixing, so won't be shipped anyway.
      # - league/oauth2-client and its dependencies *are* the packages being prefixed, so linting the
      #   prefixed versions is sufficient.
      # - The test utilities are dev dependencies. Removing these, so we don't need to work around
      #   the PHP version restrictions set by PHPUnit.
#      - name: Delete dependencies which are not cross-version compatible
#        run: composer remove --dev humbug/php-scoper league/oauth2-client yoast/wp-test-utils phpunit/phpunit

#      - name: Regenerate the Composer autoload file
#        run: composer du

      - name: Move the linting tools from dev to no-dev
        run: composer require yoast/yoastcs --no-scripts

      - name: Remove the vendor directory
        run: rm -rf vendor/*

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}
          ini-values: zend.assertions=1, error_reporting=-1, display_errors=On
          coverage: none
          tools: cs2pr

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: "--no-dev --no-scripts"

#      - name: Regenerate the Composer autoload file
#        run: composer du --no-scripts

      - name: Lint against parse errors
        run: composer lint -- --checkstyle | cs2pr

#install:
#  - |
#    if [[ ${TRAVIS_PHP_VERSION:0:1} == "8" || $TRAVIS_PHP_VERSION == "nightly" ]]; then
#      travis_retry composer install --no-interaction --ignore-platform-reqs --no-scripts --no-suggest
#    elif [[ "$PHPUNIT" == "1" || "$COVERAGE" == "1" ]]; then
#      # Run composer update as we have dev dependencies locked at PHP ^7.0 versions.
#      travis_retry composer update --no-interaction --no-scripts
#      travis_retry composer install --no-interaction --no-scripts
#      travis_retry composer du --no-scripts
#    fi
